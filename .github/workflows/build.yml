---

name: Builds

on:
  push:
  pull_request:
  release:
    tags:
      - 'v*'
    types: [published]

  workflow_dispatch:

jobs:
  Build:
    name: Build
    if: always()

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
#          - { os: ubuntu-18.04,  compiler: gcc,   version: 4.8 }
#          - { os: ubuntu-18.04,  compiler: gcc,   version:   5 }
#          - { os: ubuntu-18.04,  compiler: gcc,   version:   6 }
#          - { os: ubuntu-20.04,  compiler: gcc,   version:   7 }
#          - { os: ubuntu-20.04,  compiler: gcc,   version:   8 }
#          - { os: ubuntu-22.04,  compiler: gcc,   version:   9 }
#          - { os: ubuntu-22.04,  compiler: gcc,   version:  10 }
#          - { os: ubuntu-22.04,  compiler: gcc,   version:  11 }
#          - { os: ubuntu-22.04,  compiler: gcc,   version:  12 }
#          - { os: ubuntu-20.04,  compiler: clang, version:   9 }
#          - { os: ubuntu-20.04,  compiler: clang, version:  10 }
#          - { os: ubuntu-20.04,  compiler: clang, version:  11 }
#          - { os: ubuntu-20.04,  compiler: clang, version:  12 }
#          - { os: ubuntu-22.04,  compiler: clang, version:  13 }
#          - { os: ubuntu-22.04,  compiler: clang, version:  14 }
          - { os: ubuntu-22.04,  compiler: clang, version:  15 }
#          - { os: macos-10.15,   compiler: native              }
#          - { os: macos-11,      compiler: native              }
#          - { os: macos-12,      compiler: native              }

    # set CC to 'cc' for MacOS and the (e.g.) clang-12 for Linux
    env:
      CC: ${{ matrix.compiler == 'native' && 'cc' || format('{0}-{1}',matrix.compiler,matrix.version) }}

    steps:
      - name: Housekeeping
        run: |
          sudo apt-get purge man-db
        if: runner.os == 'Linux'

      - name: Install gcc
        run: |
          sudo add-apt-repository --yes --update ppa:ubuntu-toolchain-r/test
          sudo apt-get install --yes gcc-${{matrix.version}}
        if: runner.os == 'Linux' && matrix.compiler == 'gcc'

      - name: Install clang
        run: |
          wget https://apt.llvm.org/llvm.sh
          sudo bash ./llvm.sh ${{ matrix.version }}
        if: runner.os == 'Linux' &&  matrix.compiler == 'clang'

      - name: Show compiler version
        run: $CC --version

      - name: Install dependencies
        run: |
          sudo apt-get install --yes libpam0g-dev libcurl4-openssl-dev
        if: runner.os == 'Linux'

      - name: Checkout
        uses: actions/checkout@v3

      - name: Test compilation
        run: |
          make all

      - name: Test make clean
        run: |
          make clean
          make clean
          rm -rf json-parser/
          make clean


  source_dist:
    name: "Source dist"
    if: >
      github.actor!='dependabot[bot]' &&
      github.event_name!='pull_request' &&
      ( github.ref_type=='tag' || github.ref_type=='branch' )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Save version info
        run: |
          git log -1 > .//git.info

      - name: debug
        run: "env | sort"

      - name: Get tag/branch name
        run: |
          if [ "$GITHUB_REF_TYPE" = 'branch' ]; then
            echo "0.branch-$GITHUB_REF_NAME" > /tmp/version
          elif [ "$GITHUB_REF_TYPE" = 'tag' ]; then
            echo "$GITHUB_REF_NAME" > /tmp/version
          else
            exit 1
          fi
          echo PWL_VERSION=$(cat /tmp/version | tr -C 'a-zA-Z0-9_+-' '_') >> $GITHUB_ENV

      - name: Create source tarball
        run: |
          tar -cJ -f /tmp/pam-weblogin-${PWL_VERSION}.tar.xz \
            --transform "s,^\./,pam-weblogin-${PWL_VERSION}/," --sort=name \
            --owner=0 --group=0 --mode=u=rwX,go=rX \
            --exclude=./.git \
            .

      - name: Show what we are shipping
        run: |
          tar tvJf /tmp/pam-weblogin-${PWL_VERSION}.tar.xz

      - name: Create Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "dist-source"
          path: "/tmp/pam-weblogin-${{env.PWL_VERSION}}.tar.xz"


  rpm_centos7:
    name: Build RPM for CentOS7
    needs:
      - source_dist
    runs-on: "ubuntu-latest"
    steps:
      - name: Get tag/branch name
        run: |
          if [ "$GITHUB_REF_TYPE" = 'branch' ]; then
            echo "0.branch-$GITHUB_REF_NAME" > /tmp/version
          elif [ "$GITHUB_REF_TYPE" = 'tag' ]; then
            echo "$GITHUB_REF_NAME" > /tmp/version
          else
            exit 1
          fi
          echo PWL_VERSION=$(cat /tmp/version | tr -C 'a-zA-Z0-9_+-' '_') >> $GITHUB_ENV

      - name: Fetch source
        id: fetch_source
        uses: actions/download-artifact@v3
        with:
          name: "dist-source"
          path: "."

      - name: Show source-dist
        run: |
          ls -la ${{steps.fetch_source.outputs.download-path}}
          sha1sum ${{steps.fetch_source.outputs.download-path}}/* || true
          sha256sum ${{steps.fetch_source.outputs.download-path}}/* || true

      - name: Prepare build dir
        run: |
          mkdir -p rpmbuild/SOURCES
          cp ${{steps.fetch_source.outputs.download-path}}/pam-weblogin-${PWL_VERSION}.tar.xz rpmbuild/SOURCES
          tar xvJf ${{steps.fetch_source.outputs.download-path}}/pam-weblogin-${PWL_VERSION}.tar.xz '*.spec'

      - name: build RPM package
        run: >
          docker pull centos:7;
          docker run -ti
            -v `pwd`/rpmbuild:/root/rpmbuild/
            -v $(pwd)/pam-weblogin.spec:/pam-weblogin.spec
            centos:7
            /bin/sh -c '
              touch /root/rpmbuild/bla &&
              yum install -y rpm-build &&
              yum-builddep -y pam-weblogin.spec &&
              rpmbuild -ba --define "pwl_version ${PWL_VERSION}" --define "pwl_distro centos7" pam-weblogin.spec
            '

      - name: debug
        run: ls -laR rpmbuild

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: Binary RPM
          path: ${{ steps.rpm.outputs.rpm_dir_path }}

      - name: Setup tmate session
        if: "failure()"
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        timeout-minutes: 15


  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - source_dist
      - rpm_centos7
    steps:
      - name: Fetch build
        id: fetch_artifact
        uses: actions/download-artifact@v3
        with:
          name: "source-dist"
          path: "artifacts/"

      - name: Create Release
        if: "github.ref_type=='tag'"
        uses: softprops/action-gh-release@v1
        with:
          files: "${{steps.fetch_artifact.outputs.download-path}}/*"

      - name: Advance latest tag
        if: "github.ref_name=='main'"
        uses: EndBug/latest-tag@v1
        with:
          tag-name: "latest"
          description: "Latest commit in the main branch"

      - name: remove all previous "latest" releases
        if: "github.ref_name=='main'"
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 0
          delete_tag_pattern: "latest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release for main/latest
        if: "github.ref_name=='main'"
        uses: softprops/action-gh-release@v1
        with:
          name: "latest"
          tag_name: "latest"
          prerelease: true
          files: "/tmp/sbs.tar.xz"


